/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface KingInterface extends utils.Interface {
  functions: {
    "MATIC_USD_ORACLE()": FunctionFragment;
    "USDC_ADDRESS()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "getKing()": FunctionFragment;
    "maximumPaid()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGasAllocatedForKingPayment(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MATIC_USD_ORACLE"
      | "USDC_ADDRESS"
      | "deposit"
      | "emergencyWithdraw"
      | "getKing"
      | "maximumPaid"
      | "owner"
      | "renounceOwnership"
      | "setGasAllocatedForKingPayment"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MATIC_USD_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getKing", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maximumPaid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGasAllocatedForKingPayment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MATIC_USD_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasAllocatedForKingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "EthEmergencyWithdrawal(bool,uint256)": EventFragment;
    "EthSent(bool,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UsdcDeposit(uint256,address)": EventFragment;
    "UsdcEmergencyWithdrawal(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthEmergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsdcDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsdcEmergencyWithdrawal"): EventFragment;
}

export interface EthEmergencyWithdrawalEventObject {
  sent: boolean;
  balance: BigNumber;
}
export type EthEmergencyWithdrawalEvent = TypedEvent<
  [boolean, BigNumber],
  EthEmergencyWithdrawalEventObject
>;

export type EthEmergencyWithdrawalEventFilter =
  TypedEventFilter<EthEmergencyWithdrawalEvent>;

export interface EthSentEventObject {
  success: boolean;
  amount: BigNumber;
  king: string;
}
export type EthSentEvent = TypedEvent<
  [boolean, BigNumber, string],
  EthSentEventObject
>;

export type EthSentEventFilter = TypedEventFilter<EthSentEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UsdcDepositEventObject {
  amount: BigNumber;
  king: string;
}
export type UsdcDepositEvent = TypedEvent<
  [BigNumber, string],
  UsdcDepositEventObject
>;

export type UsdcDepositEventFilter = TypedEventFilter<UsdcDepositEvent>;

export interface UsdcEmergencyWithdrawalEventObject {
  usdcBalance: BigNumber;
}
export type UsdcEmergencyWithdrawalEvent = TypedEvent<
  [BigNumber],
  UsdcEmergencyWithdrawalEventObject
>;

export type UsdcEmergencyWithdrawalEventFilter =
  TypedEventFilter<UsdcEmergencyWithdrawalEvent>;

export interface King extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MATIC_USD_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getKing(overrides?: CallOverrides): Promise<[string]>;

    maximumPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasAllocatedForKingPayment(
      gasAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MATIC_USD_ORACLE(overrides?: CallOverrides): Promise<string>;

  USDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  deposit(
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getKing(overrides?: CallOverrides): Promise<string>;

  maximumPaid(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasAllocatedForKingPayment(
    gasAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MATIC_USD_ORACLE(overrides?: CallOverrides): Promise<string>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    deposit(
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getKing(overrides?: CallOverrides): Promise<string>;

    maximumPaid(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGasAllocatedForKingPayment(
      gasAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EthEmergencyWithdrawal(bool,uint256)"(
      sent?: null,
      balance?: null
    ): EthEmergencyWithdrawalEventFilter;
    EthEmergencyWithdrawal(
      sent?: null,
      balance?: null
    ): EthEmergencyWithdrawalEventFilter;

    "EthSent(bool,uint256,address)"(
      success?: null,
      amount?: null,
      king?: null
    ): EthSentEventFilter;
    EthSent(success?: null, amount?: null, king?: null): EthSentEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UsdcDeposit(uint256,address)"(
      amount?: null,
      king?: null
    ): UsdcDepositEventFilter;
    UsdcDeposit(amount?: null, king?: null): UsdcDepositEventFilter;

    "UsdcEmergencyWithdrawal(uint256)"(
      usdcBalance?: null
    ): UsdcEmergencyWithdrawalEventFilter;
    UsdcEmergencyWithdrawal(
      usdcBalance?: null
    ): UsdcEmergencyWithdrawalEventFilter;
  };

  estimateGas: {
    MATIC_USD_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getKing(overrides?: CallOverrides): Promise<BigNumber>;

    maximumPaid(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasAllocatedForKingPayment(
      gasAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MATIC_USD_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getKing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasAllocatedForKingPayment(
      gasAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
