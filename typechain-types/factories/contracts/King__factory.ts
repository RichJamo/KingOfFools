/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { King, KingInterface } from "../../contracts/King";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "king",
        type: "address",
      },
    ],
    name: "EthDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "king",
        type: "address",
      },
    ],
    name: "UsdcDeposit",
    type: "event",
  },
  {
    inputs: [],
    name: "MATIC_USD_ORACLE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_secret",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getKing",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maximumPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052341561000f57600080fd5b60008054336001600160a01b031982168117835590916001600160a01b038316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0906080a35061134e80610066608039806080f3fe60406080815260043610610229576000803560e01c63423cb99e81146100875763715018a681146100c857637920d80481146100e857638da5cb5b811461012157638db9f39a81146101595763bb09d9b7811461018a5763c9630cb081146101bb5763db2e21bc81146101df5763e1fa8e8481146101f05763f2fde38b811461020b57610226565b3415610091578182fd5b61009a3661025d565b6002546080527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060a0016080f35b34156100d2578182fd5b6100db3661025d565b6100e3610dcc565b818351f35b34156100f2578182fd5b6100fb3661025d565b600154835173ffffffffffffffffffffffffffffffffffffffff90911680825290602081f35b341561012b578182fd5b6101343661025d565b8154835173ffffffffffffffffffffffffffffffffffffffff90911680825290602081f35b3415610163578182fd5b61016c3661025d565b825173ab594600376ec9fd91f8e885dadf0ce036862de08152602081f35b3415610194578182fd5b61019d3661025d565b8251732791bca1f2de4661ed88a30c99a7a9449aa841748152602081f35b34156101c5578182fd5b6101ce36610369565b6101d88183610922565b5050818351f35b6101e83661025d565b6100e3610e40565b34156101fa578182fd5b6100e361020636610316565b610b74565b3415610215578182fd5b6100e361022136610290565b610fbe565b50505b5036610239576102376105a6565b005b600080fd5b805169ffffffffffffffffffff8116811461025857600080fd5b919050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201121561028d57600080fd5b50565b600060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc830112156102c257600080fd5b60043573ffffffffffffffffffffffffffffffffffffffff811681146102e757600080fd5b92915050565b6000602082840312156102ff57600080fd5b8151801515811461030f57600080fd5b9392505050565b600060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301121561034857600080fd5b505060043590565b60006020828403121561036257600080fd5b5051919050565b60008060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8401121561039c57600080fd5b5050600435916024359150565b6000826103df577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007f5555555555555555555555555555555555555555555555555555555555555555821160011615610419576104196110c4565b5060030290565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046064118215151615610459576104596110c4565b5060640290565b600068056bc75e2d63100000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04811183151516156104a2576104a26110c4565b91909102919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156104e3576104e36110c4565b500290565b60003d8015610553573d67ffffffffffffffff81111561050a5761050a6110f3565b60405161053f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018261055b565b8181528093503d6000602083013e50505090565b606091505090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff8211171561059f5761059f6110f3565b6040525050565b6002547f55555555555555555555555555555555555555555555555555555555555555558111600116156105dc576105dc6110c4565b8060030260011c34101561066f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f596f75277265206e6f74206465706f736974696e6720656e6f7567682065746860448201527f65722100000000000000000000000000000000000000000000000000000000006064820152608481fd5b80158015906107115761068134600255565b6106bc6106a360015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b600080600060405134855af190506106d26104e8565b5061070b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006003541660ff8215151681176003555050565b5061071a565b61071a34600255565b5050600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560035460ff1660408051821515815234602082015233918101919091527f7f7caf2cfdc2014aa045dd0ef7e9f5a6a4819e729710bed3689ba095e658738f81606081010382a15050565b6040516040810181811067ffffffffffffffff821117156107b3576107b36110f3565b60405260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656482820152732791bca1f2de4661ed88a30c99a7a9449aa84174803b610859576040517f08c379a0000000000000000000000000000000000000000000000000000000008152826004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606481fd5b60008085518487016000855af1905061087a836108746104e8565b83610d10565b9250508151801561089d5761089d61089883838601018486016102ed565b611274565b50505050565b73ffffffffffffffffffffffffffffffffffffffff6000541633811461028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606481fd5b60025461092e816103e4565b61096561095d610957610948610942610acd565b856104ab565b68056bc75e2d63100000900490565b60011c90565b841015611122565b5060045460405160208101816109ad33888490815260609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183526109dd818461055b565b506109ec8251822084146111ac565b5050508015801590610a4c57610a0183610460565b610a1a610a15610a0f610acd565b836103a9565b600255565b50610a4783610a416106a360015473ffffffffffffffffffffffffffffffffffffffff1690565b33610c23565b610a65565b610a5583610420565b610a63610a15610a0f610acd565b505b5050600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560408051828152336020820152907ff5cb588f5f04842fa8a48ffd1f1b14b97339a788a30a4ab1c445e84f46a8b5ff90829081010382a1505050565b600073ab594600376ec9fd91f8e885dadf0ce036862de0803b610aef57600080fd5b6040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a081600483855afa915081610b2d57610b2d6112fe565b6000821561030f57610b3f3d8361055b565b60a0823d8401031215610b50578081fd5b610b598261023e565b506020820151610b6b6080840161023e565b50949350505050565b60045415610be4576005544211610be4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600460248201527f57616974000000000000000000000000000000000000000000000000000000006044820152606481fd5b806004557ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1ef421115610c1857610c186110c4565b610e10420160055550565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8281166024830152831660448201526064808201859052815260a0810167ffffffffffffffff81118282101715610c9a57610c9a6110f3565b60405261089d81610790565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff82166024820152604480820184905281526064610d01818361055b565b50610d0b81610790565b505050565b6060818015610d22578391505061030f565b835115801590610d3457845185602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020806004830152875180602484015260005b81811015610d8957898101830151848201604401528201610d6d565b81811115610d9b576000604483860101525b506044837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168501030183fd5b610dd46108a3565b6000547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600055600073ffffffffffffffffffffffffffffffffffffffff82167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350565b610e486108a3565b4715610eb35747600080600060405184335af19050610e656104e8565b50610e9e817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006003541660ff8215151681176003555050565b50610eb3610eae60035460ff1690565b611210565b732791bca1f2de4661ed88a30c99a7a9449aa84174803b610ed357600080fd5b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481855afa80610f1557610f156112fe565b60008115610f3657610f273d8461055b565b610f333d840184610350565b90505b801561089d57833b610f4757600080fd5b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081523360048201526024810182905292506020836044816000885af1915081610f9657610f966112fe565b8115610fb457610fa63d8461055b565b610fb23d8401846102ed565b505b61089d8133610ca6565b610fc66108a3565b73ffffffffffffffffffffffffffffffffffffffff80821680611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608481fd5b600054817fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055838382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8061028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f596f75277265206e6f74206465706f736974696e6720656e6f7567682055534460448201527f43210000000000000000000000000000000000000000000000000000000000006064820152608481fd5b8061028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d69736d617463680000000000000000000000000000000000000000000000006044820152606481fd5b8061028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4572726f7220696e207769746864726177616c000000000000000000000000006044820152606481fd5b8061028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608481fd5b6040513d6000823e3d81fdfea3646970667358221220ac276eb5b261ab52134c9f508d090091588594640e5d23ad352ba9c25d6b1f136c6578706572696d656e74616cf564736f6c63430008070041";

type KingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class King__factory extends ContractFactory {
  constructor(...args: KingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<King> {
    return super.deploy(overrides || {}) as Promise<King>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): King {
    return super.attach(address) as King;
  }
  override connect(signer: Signer): King__factory {
    return super.connect(signer) as King__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KingInterface {
    return new utils.Interface(_abi) as KingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): King {
    return new Contract(address, _abi, signerOrProvider) as King;
  }
}
