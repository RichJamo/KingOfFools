/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { King, KingInterface } from "../../contracts/King";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "king",
        type: "address",
      },
    ],
    name: "EthDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "king",
        type: "address",
      },
    ],
    name: "UsdcDeposit",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "MATIC_USD_ORACLE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_secret",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getKing",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maximumPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gasAmount",
        type: "uint256",
      },
    ],
    name: "setGasAllocatedForKingPayment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052341561000f57600080fd5b60008054336001600160a01b031982168117835590916001600160a01b038316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0906080a35061140e80610066608039806080f3fe6040608081526004361061022e576000803560e01c631f19ec2981146100925763423cb99e81146100b25763715018a681146100d257637920d80481146100ed57638da5cb5b811461012657638db9f39a811461015e5763bb09d9b7811461018f5763c9630cb081146101c05763db2e21bc81146101e45763e1fa8e8481146101f55763f2fde38b81146102105761022b565b341561009c578182fd5b6100ad6100a83661031e565b6110c7565b818351f35b34156100bc578182fd5b6100c536610265565b6002548351818152602081f35b34156100dc578182fd5b6100e536610265565b6100ad610e11565b34156100f7578182fd5b61010036610265565b600154835173ffffffffffffffffffffffffffffffffffffffff90911680825290602081f35b3415610130578182fd5b61013936610265565b8154835173ffffffffffffffffffffffffffffffffffffffff90911680825290602081f35b3415610168578182fd5b61017136610265565b825173ab594600376ec9fd91f8e885dadf0ce036862de08152602081f35b3415610199578182fd5b6101a236610265565b8251732791bca1f2de4661ed88a30c99a7a9449aa841748152602081f35b34156101ca578182fd5b6101d336610371565b6101dd8183610957565b5050818351f35b6101ed36610265565b6100ad610e85565b34156101ff578182fd5b6100ad61020b3661031e565b610ba3565b341561021a578182fd5b6100ad61022636610298565b610fc1565b50505b503661023e5761023c610740565b005b61023c6105e6565b805169ffffffffffffffffffff8116811461026057600080fd5b919050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201121561029557600080fd5b50565b600060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc830112156102ca57600080fd5b60043573ffffffffffffffffffffffffffffffffffffffff811681146102ef57600080fd5b92915050565b60006020828403121561030757600080fd5b8151801515811461031757600080fd5b9392505050565b600060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301121561035057600080fd5b505060043590565b60006020828403121561036a57600080fd5b5051919050565b60008060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc840112156103a457600080fd5b5050600435916024359150565b816000823760609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016910190815260140190565b60008261041f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007f5555555555555555555555555555555555555555555555555555555555555555821160011615610459576104596110d4565b5060030290565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff046064118215151615610499576104996110d4565b5060640290565b600068056bc75e2d63100000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04811183151516156104e2576104e26110d4565b91909102919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610523576105236110d4565b500290565b60003d8015610593573d67ffffffffffffffff81111561054a5761054a611103565b60405161057f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018261059b565b8181528093503d6000602083013e50505090565b606091505090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156105df576105df611103565b6040525050565b6002546106066105fe6105f883610424565b60011c90565b3410156111bc565b600354604051602081018161061c3336846103b1565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835261064c818461059b565b5061065b825182208414611246565b50505080158015906107095761067034600255565b6106ab61069260015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6005546000806000604051348686f19150506106c5610528565b5060408051821515815234602082015233918101919091527f7f7caf2cfdc2014aa045dd0ef7e9f5a6a4819e729710bed3689ba095e658738f606082a15050610712565b61071234600255565b5050600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f536f7272792c20796f75277265206e6f74207468652063757272656e746c792060448201527f72656769737465726564206465706f7369746f722e00000000000000000000006064820152608481fd5b6040516040810181811067ffffffffffffffff821117156107e8576107e8611103565b60405260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656482820152732791bca1f2de4661ed88a30c99a7a9449aa84174803b61088e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152826004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606481fd5b60008085518487016000855af190506108af836108a9610528565b83610d55565b925050815180156108d2576108d26108cd83838601018486016102f5565b611334565b50505050565b73ffffffffffffffffffffffffffffffffffffffff60005416338114610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606481fd5b60025461096381610424565b61099461098c6105f861097d610977610afc565b856104eb565b68056bc75e2d63100000900490565b841015611132565b5060035460405160208101816109dc33888490815260609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352610a0c818461059b565b50610a1b825182208414611246565b5050508015801590610a7b57610a30836104a0565b610a49610a44610a3e610afc565b836103e9565b600255565b50610a7683610a7061069260015473ffffffffffffffffffffffffffffffffffffffff1690565b33610c68565b610a94565b610a8483610460565b610a92610a44610a3e610afc565b505b5050600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560408051828152336020820152907ff5cb588f5f04842fa8a48ffd1f1b14b97339a788a30a4ab1c445e84f46a8b5ff90829081010382a1505050565b600073ab594600376ec9fd91f8e885dadf0ce036862de0803b610b1e57600080fd5b6040517ffeaf968c00000000000000000000000000000000000000000000000000000000815260a081600483855afa915081610b5c57610b5c6113be565b6000821561031757610b6e3d8361059b565b60a0823d8401031215610b7f578081fd5b610b8882610246565b506020820151610b9a60808401610246565b50949350505050565b60035415610c5f576004544211610c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604e60248201527f536f6d656f6e6520656c736520686173207265676973746572656420746f206460448201527f65706f7369742c20706c65617365207761697420616e6420747279206167616960648201527f6e20696e2033206d696e75746573000000000000000000000000000000000000608482015260a481fd5b60035542600455565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8281166024830152831660448201526064808201859052815260a0810167ffffffffffffffff81118282101715610cdf57610cdf611103565b6040526108d2816107c5565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff82166024820152604480820184905281526064610d46818361059b565b50610d50816107c5565b505050565b6060818015610d675783915050610317565b835115801590610d7957845185602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020806004830152875180602484015260005b81811015610dce57898101830151848201604401528201610db2565b81811115610de0576000604483860101525b506044837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401168501030183fd5b610e196108d8565b6000547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600055600073ffffffffffffffffffffffffffffffffffffffff82167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350565b610e8d6108d8565b4715610eb65747600080600060405184335af19050610eaa610528565b50610eb4816112d0565b505b732791bca1f2de4661ed88a30c99a7a9449aa84174803b610ed657600080fd5b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481855afa80610f1857610f186113be565b60008115610f3957610f2a3d8461059b565b610f363d840184610358565b90505b80156108d257833b610f4a57600080fd5b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081523360048201526024810182905292506020836044816000885af1915081610f9957610f996113be565b8115610fb757610fa93d8461059b565b610fb53d8401846102f5565b505b6108d28133610ceb565b610fc96108d8565b73ffffffffffffffffffffffffffffffffffffffff8082168061106b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608481fd5b600054817fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055838382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a350505050565b6110cf6108d8565b600555565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b80610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f596f75277265206e6f74206465706f736974696e6720656e6f7567682055534460448201527f43210000000000000000000000000000000000000000000000000000000000006064820152608481fd5b80610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f596f75277265206e6f74206465706f736974696e6720656e6f7567682065746860448201527f65722100000000000000000000000000000000000000000000000000000000006064820152608481fd5b80610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f536f7272792c20796f75277265206e6f74207468652063757272656e746c792060448201527f72656769737465726564206465706f7369746f722e00000000000000000000006064820152608481fd5b80610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4572726f7220696e207769746864726177616c000000000000000000000000006044820152606481fd5b80610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608481fd5b6040513d6000823e3d81fdfea364697066735822122092bd6b6d8c877666a025c1867fe7ce884276699ce6a7bcead02f828c2611d0ac6c6578706572696d656e74616cf564736f6c63430008070041";

type KingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class King__factory extends ContractFactory {
  constructor(...args: KingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<King> {
    return super.deploy(overrides || {}) as Promise<King>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): King {
    return super.attach(address) as King;
  }
  override connect(signer: Signer): King__factory {
    return super.connect(signer) as King__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KingInterface {
    return new utils.Interface(_abi) as KingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): King {
    return new Contract(address, _abi, signerOrProvider) as King;
  }
}
