/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { King, KingInterface } from "../../contracts/King";

const _abi = [
  {
    inputs: [],
    name: "USDC_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_king",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "deposit_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "previous_maximum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "previous_usdc_maximum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60808060405234610016576104cc908161001c8239f35b600080fdfe6080806040526004361015610025575b50361561001b57600080fd5b61002361037b565b005b6000803560e01c91826329cc6d6f1461009457505080636e4a17d31461008b5780639144c25414610082578063b6b55f25146100795763bb09d9b71461006c575b3861000f565b61007461025c565b610066565b50610074610163565b50610074610126565b506100746100e4565b346100e057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e05773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b5080fd5b50346101215760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610121576020600254604051908152f35b600080fd5b50346101215760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610121576020600154604051908152f35b50346101215760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101215761020060206004356101ba6101b26101ac6002546102aa565b60011c90565b821015610309565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019190915291829081906064820190565b03816000732791bca1f2de4661ed88a30c99a7a9449aa841745af1801561024f575b61022857005b6100239060203d8111610248575b610240818361040e565b81019061047e565b503d610236565b61025761036e565b610222565b50346101215760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610121576020604051732791bca1f2de4661ed88a30c99a7a9449aa841748152f35b7f555555555555555555555555555555555555555555555555555555555555555581116001166102da5760030290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b1561031057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f596f7520646f6e2774206861766520656e6f75676820657468657221000000006044820152fd5b506040513d6000823e3d90fd5b60015461039561038a826102aa565b60011c341015610309565b6103ca575b337fffffffffffffffffffffffff0000000000000000000000000000000000000000600054161760005534600155565b600080808073ffffffffffffffffffffffffffffffffffffffff81541681903415610404575b3491f161039a576103ff61036e565b61039a565b6108fc91506103f0565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761044f57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9081602091031261012157518015158103610121579056fea26469706673582212208f2de8e5c49018cdb945cd32d66521732233df3e2e76c64dbec9e99d83d1f1c964736f6c634300080d0033";

type KingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class King__factory extends ContractFactory {
  constructor(...args: KingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<King> {
    return super.deploy(overrides || {}) as Promise<King>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): King {
    return super.attach(address) as King;
  }
  override connect(signer: Signer): King__factory {
    return super.connect(signer) as King__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KingInterface {
    return new utils.Interface(_abi) as KingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): King {
    return new Contract(address, _abi, signerOrProvider) as King;
  }
}
